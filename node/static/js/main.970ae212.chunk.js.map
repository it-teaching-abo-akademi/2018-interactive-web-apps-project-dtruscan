{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Label","react_default","a","createElement","style","fontFamily","fontWeight","padding","margin","this","props","color","React","Component","Square","squareStyle","height","backgroundColor","Card","width","WebkitFilter","filter","App_Square","App_Label","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","querySelector","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iGAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,6KCMlCC,gMASE,OACIC,EAAAC,EAAAC,cAAA,KAAGC,MARU,CACbC,WAAY,aACZC,WAAY,OACZC,QAAS,GACTC,OAAQ,IAIeC,KAAKC,MAAMC,cAV1BC,IAAMC,YAepBC,mLAEE,IAAIC,EAAc,CACdC,OAAQ,IACRC,gBAAkBR,KAAKC,MAAMC,OAGjC,OACIV,EAAAC,EAAAC,cAAA,OAAKC,MAAOW,WARHH,IAAMC,WAmCZK,mLATP,OACIjB,EAAAC,EAAAC,cAAA,OAAKC,MAVO,CACZY,OAAQ,IACRG,MAAO,IACPZ,QAAS,EACTU,gBAAiB,OACjBG,aAAc,gCACdC,OAAQ,kCAKJpB,EAAAC,EAAAC,cAACmB,EAAD,CAAQX,MAAOF,KAAKC,MAAMC,QAC1BV,EAAAC,EAAAC,cAACoB,EAAD,CAAOZ,MAAOF,KAAKC,MAAMC,gBAdtBC,IAAMC,WCxBLW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACL7B,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAC4B,EAAD,CAAMpB,MAAM,aAEhBqB,SAASC,cAAc,QAG3BJ,IAASC,OACL7B,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAC4B,EAAD,CAAMpB,MAAM,YAEhBqB,SAASC,cAAc,QAE3BJ,IAASC,OACL7B,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAC4B,EAAD,CAAMpB,MAAM,UAEhBqB,SAASC,cAAc,QD0GrB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.970ae212.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\n\n\nclass Label extends React.Component {\n    render() {\n        var labelStyle = {\n            fontFamily: \"sans-serif\",\n            fontWeight: \"bold\",\n            padding: 13,\n            margin: 0\n        };\n\n        return (\n            <p style={labelStyle}>{this.props.color}</p>\n        )\n    };\n}\n\nclass Square extends React.Component {\n    render(){\n        var squareStyle = {\n            height: 150,\n            backgroundColor:  this.props.color\n        };\n\n        return(\n            <div style={squareStyle}>\n\n            </div>\n        );\n    }\n}\n\nclass Card extends React.Component {\n    render(){\n        var cardStyle = {\n            height: 200,\n            width: 150,\n            padding: 0,\n            backgroundColor: \"#FFF\",\n            WebkitFilter: \"drop-shadow(0px 0px 5px #666)\",\n            filter: \"drop-shadow(0px 0px 5px #666)\"\n        };\n\n        return (\n            <div style={cardStyle}>\n                <Square color={this.props.color}/>\n                <Label color={this.props.color}/>\n            </div>\n        );\n    }\n}\n\nexport default Card;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Card from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <div>\n        <Card color=\"#FFA737\"/>\n    </div>,\n    document.querySelector(\"#d1\")\n);\n\nReactDOM.render(\n    <div>\n        <Card color=\"yellow\"/>\n    </div>,\n    document.querySelector(\"#d2\")\n);\nReactDOM.render(\n    <div>\n        <Card color=\"blue\"/>\n    </div>,\n    document.querySelector(\"#d3\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}